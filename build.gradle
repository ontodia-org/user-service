buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.1'
    }
}



apply plugin: 'java'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'


version = '0.1.4'
group = 'org.ontodia'

compileJava {
    options.encoding = 'UTF-8'
    sourceCompatibility = 1.8
}

publish.dependsOn build

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
}
publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId 'org.ontodia'
            artifactId 'user-service'
            /*pom.withXml {
                def parentNode = asNode().appendNode('parent')
                parentNode.appendNode('groupId','org.springframework.boot')
                parentNode.appendNode('artifactId','spring-boot-starter-parent')
                parentNode.appendNode('version','1.2.3.RELEASE')
            }*/
            from components.java
            artifact sourceJar {
                classifier "sources"
            }
        }
    }
}


repositories {
    mavenLocal()
    mavenCentral()

}

dependencies {
    compile("org.springframework:spring-context-support:4.1.6.RELEASE")
    compile("org.springframework:spring-web:4.1.6.RELEASE")
    compile("org.springframework:spring-webmvc:4.1.6.RELEASE")
    compile("org.springframework.security:spring-security-core:3.2.7.RELEASE")
    compile("javax.servlet:javax.servlet-api:3.1.0")

    testCompile group: 'junit', name: 'junit', version: '4.11'
    compile group: 'com.sun.mail', name: 'javax.mail', version: '1.5.2'
    compile 'joda-time:joda-time:2.7'
}

bintray {
    user = bintrayUser //this comes from gradle.properties file in ~/.gradle
    key = bintrayKey //this comes from gradle.properties file in ~/.gradle

    publications = ['mavenJava'] //When uploading Maven-based publication files
    dryRun = false //Whether to run this as dry-run, without deploying
    publish = true //If version should be auto published after an upload
    pkg {
        repo = 'ontodia'
        userOrg = 'ontodia-org' //An optional organization name when the repo belongs to one of the user's orgs
        name = 'user-service'
        desc = 'Reusable user service using Spring Security. User registration, email confirmation, password restore, etc.'
        websiteUrl = 'https://github.com/ontodia-org/user-service'
        issueTrackerUrl = 'https://github.com/ontodia-org/user-service/issues'
        vcsUrl = 'https://github.com/ontodia-org/user-service.git'
        licenses = ['Apache-2.0']
        labels = ['user-management', 'spring-secutiry', 'registration']
        publicDownloadNumbers = true
        //attributes= ['a': ['ay1', 'ay2'], 'b': ['bee'], c: 'cee'] //Optional package-level attributes
        //Optional version descriptor
        /*version {
            name = project.version //Bintray logical version name
            desc = 'optional, version-specific description'
//                released  = 'optional, date of the version release' //2 possible values: date in the format of 'yyyy-MM-dd'T'HH:mm:ss.SSSZZ' OR a java.util.Date instance
//                vcsTag = '1.3.0'
//                attributes = ['gradle-plugin': 'com.use.less:com.use.less.gradle:gradle-useless-plugin'] //Optional version-level attributes
//                gpg {
//                    sign = true //Determines whether to GPG sign the files. The default is false
//                    passphrase = 'passphrase' //Optional. The passphrase for GPG signing'
//                }
            mavenCentralSync {
                sync = false //Optional (true by default). Determines whether to sync the version to Maven Central.
                user = 'userToken' //OSS user token
                password = 'paasword' //OSS user password
                close = '1' //Optional property. By default the staging repository is closed and artifacts are released to Maven Central. You can optionally turn this behaviour off (by puting 0 as value) and release the version manually.
            }
        }*/
    }
}

